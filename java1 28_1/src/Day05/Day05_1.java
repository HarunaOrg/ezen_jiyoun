package Day05;

public class Day05_1 {
	public static void main(String[] args) {
	
		/* 변수 : 하나의 데이터만 저장
		 * 배열 : 동일한 자료형 데이터의 특정한 기준[인덱스]으로 나열
		 * 1차원 배열 : (가로) 자료형[] 배열명 = new 자료형[길이];
		 * 			int[] arr = new int[3]
		 * 			int int int //1줄만 쓰는게 1차열
		 * 			* int형 변수 3개를 저장할 수 있는 배열
		 * 2차원 배열 : (가로 세로) 자료형[][] 배열명 = new 자료형[가로=행][세로=열];
		 * 			int[][] arr2 = new int[4][3];
		 * 			int int int
		 * 			int int int
		 * 			int int int
		 * 			int int int
		 * 			//가로 4칸 세로3칸으로 사용할 것인지?
		 * 			* int 형 변수 12개를 저장할 수 있는 배열
		 * 다차원 배열 : (가로 세로 높이) 데이터 베이스가 있으므로 자주 사용 x
		 * 			3차원: 자료형[][][] 배열명 = new 자료형[행][열][높이]
		 */
		
			// 예제1)
		int[] 배열 = new int[3]; // int : 4바이트 * 3 => 12바이트 배열
		배열[0] = 80; 배열[1] = 90; 배열[2] = 100;
		//1차원 배열. 인덱스. 0번 인덱스에 80데이터를 대입시킨다.
		
		int[][] 배열2 = new int[2][3]; 
		//2차원 배열. 앞이 행, 뒤가 열. 4바이트 * 2 * 3 => 24바이트 배열
		배열2[0][0] = 80; 배열2[0][1] = 90; 배열2[0][2] = 100;
		배열2[1][0] = 40; 배열2[1][1] = 50; 배열2[1][2] = 60;
		
		System.out.println("1차원 배열 : " + 배열);
		System.out.println("2차원 배열 : " + 배열2);
		// 인덱스 없이 배열명만 호출 시 메모리의 주소값만 출력
		
		System.out.println("1차원 배열 길이 : " +배열.length); // length = 길이. 배열의 길이.
		System.out.println("2차원 배열 행 길이 : " +배열2.length); // 2차원 배열의 행 길이
		System.out.println("2차원 배열 열 길이 : " +배열2[0].length); //열(인덱스)을 입력해주고 렝스 찍으면 열길이
		
		
			// 예제2) 반복문을 이용한 0~49까지 첫번째 행 저장. 50~99까지 두번째 행에 저장하는 2차원 배열 선언
		int[][] 배열3 = new int[2][50]; // 두줄이니까 2행. int 4바이트가 2개 있고, 50까지 저장하면 400바이트 배열 선언, 총 100칸
		
		
		//저장 반복
		for( int i = 0; i<100; i++) {
			// i는 0부터 100미만까지 1씩 증가
			
			//첫번째 행 값 넣기. 열은 i로 넣는다.
			if(i<50) 배열3[0][i] = i; //i가 0부터 100미만까지 1씩 증가. [0]은 첫번째 행을 의미 [i]는 i번째 열 번호.
			//i가 50미만이면 첫번째 행. 
			else 배열3[1][i-50] = i; 	//[1]은 두번째 행, [i]는 i번째 열 번호.
			//i가 50 이상이면 두번째 행. 50을 빼서 0으로 만든다..? 50으로 만들었기에 50을 저장하지 못하므로 실제 50의 위치는 1,0이기에 깎는다.
			//i가 99까지 가므로 
		}
		
		
		//출력 반복문
		for(int i = 0 ; i<100 ; i++) {
			//첫번째 행 출력
		if(i<50) System.out.printf("%3d", 배열3[0][i]);	
			// i는 50까지만 출력. %d : 정수. %f : 실수. 형식문자 앞에 숫자를 넣으면 넣은 만큼 자릿수가 늘어난다.
			// %.2f : 소수점 자릿수. %3d를 쓰면 3칸... 이런식으로 늘어난다. 
			// %3.2f : 3칸을 소숫점 2자리까지 나타낸다는 뜻
		
		//두번째 행 출력
		else System.out.printf("%3d", 배열3[1][i-50]);
			
		//행 구분
		if(i==49) System.out.println();
		// 만일 i가 49이면 한 칸 내린다. (줄바꿈)			
		}
		
		
		
		
		
		
		
		
		
		
		
		
	}//me
} //ce
