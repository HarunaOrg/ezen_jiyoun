package Day09;

import java.util.Random;

public class day9_6_은행컨트롤러 { //클래스
			//입출력 기능 x
	//V[입출력] <------>C[코드]
	
	
	//해당 클래스는 은행 관련 컨트롤러로 사용한다.
	//M : 모델 [ 데이터 ]
	//V : 뷰 [ HTML 등의 프론트, 입출력 ]
	//C : 모델(M)과 뷰(V)를 연결하는 역할
	//v(html) <- c(java) -> m(db)
	
	//C : 뷰에서 요청하는 서비스 제공
	
	
		//1.계좌생성 (생성)
	//메소드 생성
	//성공실패를 반환하기 위해 boolean을 만들고 일단 return false;를 임시로 넣는다.
	public String 계좌생성(String 비밀번호, String 계좌주, int 은행번호) {  
	 // 은행계좌프로그램의 선택 1을 가져온다. 계좌생성()의 ()안에 가져오는 것들을 밀어넣는다.
		
		//반환타입을 boolean을 string으로 바꿈
		//그 다음 하단으로 가서 return 부분을 변경
		
		String 계좌번호 = null; //선언한 이유 : while 안에서 선언시 while 안에서만 사용 가능
		
		while(true) { //무한루프			
			//1.입력 받은 값을 가져오고(인수)
			//계좌번호 자동생성(랜덤)
			 Random random = new Random();
			 // 4자리
			 int 난수 = random.nextInt(10000); //0~9999 사이
			계좌번호 = String.format("%04d", 난수); //%4d : 4자리 정수형(빈칸은 0처리)
					//문자 형식 변경할때 사용하는 것.
						// %d 정수, %4d 정수 4자리[자릿수 없으면 공백처리] <-차이점-> %04d 정수 4자리[자릿수 없으면 0처리]
										//15-> 공백공백15                   15-> 0015
			//중괄호 안 : 지역변수(바깥x)
			
			//중복 체크(무한루프)
			Boolean 계좌번호중복 = false;
			for( day9_6_은행 temp2 : day9_6_은행계좌프로그램.계좌리스트) {
				if(temp2 != null && temp2.get계좌번호().equals(계좌번호))
					//null이 아니면서 기존 배열 내 계좌번호와 동일하면
				{ 계좌번호중복 = true;
				}
			}
			//만일 중복이 없으면
			if(계좌번호중복 == false) break; //무하ㅣㄴ루프 종료
			//반복문 탈출
		}//while end 
		
		
		
		// 다수의 변수를 하나의 객체로 만들기 위해 객체화를 시킨다.
						//수퍼클래스 만들고 서브클래스에 할당
		day9_6_은행 temp = null; //처음에는 null이지만 선택에 따라 추가된다.
		if(은행번호 == 1) { temp = new day9_6_국민은행(계좌번호, 비밀번호, 계좌주, 0); }
		else if(은행번호 == 2){ temp = new day9_6_신한은행(계좌번호, 비밀번호, 계좌주, 0);}
		 else if(은행번호 == 3){ temp = new day9_6_하나은행(계좌번호, 비밀번호, 계좌주, 0);}
		//이렇게 가져온 것을 하나에 담는다(atm)
		
		
		//2.배열(DB)에 저장한다.
		int i = 0; //인덱스
		for(day9_6_은행 temp2 : day9_6_은행계좌프로그램.계좌리스트)
			{ if( temp2 == null ){ //null)빈공간(이면 인덱스를 잘 찾아서 넣는다,
				//추가된 것을 i에 저장
			day9_6_은행계좌프로그램.계좌리스트[i] = temp;	//해당 temp가 공백이면 저장
			return 계좌번호; //true  이면 성공(계좌번호가 존재하면 성공)
			}
			i++; //인덱스 증가
		}		
		return null;
	}
	///////////////////////////////////////////////////////////////
		//2.입금 (업데이트)
	public boolean 입금(String 계좌번호, int 입금액) { //계좌생성할때 입력된 값을 가져와서 일치하면 입금 가능
		
		//1.동일한 계좌번호를 찾아 동일한 계좌번호가 있으면 입금처리, 없으면 입금 실패
		//돌리기
		int i = 0;
		for( day9_6_은행 temp : day9_6_은행계좌프로그램.계좌리스트 ) {
			if( temp != null && temp.get계좌번호().equals(계좌번호)) {
			//해당 계좌가 공백이 아니고 입력한 [인수]와 값이 같으면 성공.
				//동일한 계좌 찾기
			day9_6_은행계좌프로그램.계좌리스트[i].set예금액( temp.get예금액()+ 입금액);
								//setter= 기존금액 + 새로운 입금액
			//프리베이터는 getter setter을 통해서만 가능
			
			return true; //성공
		}
		i++;
	}	
		return false; //실패

}
	///////////////////////////////////////
		//3.출금 (업데이트)
	public int 출금( String 계좌번호, String 비밀번호, int 출금액 ) { 
		
		//1. 동일한 계좌번호를 찾아서
		int i = 0;
		for(day9_6_은행 temp : day9_6_은행계좌프로그램.계좌리스트) {
			//2. 해당 계좌번호와 비밀번호가 일치
			if(temp != null && temp.get계좌번호().equals(계좌번호)
					&& temp.get비밀번호().equals(비밀번호) ) {
				if(temp.get예금액() < 출금액 ) { return 1; //잔액 부족 의미 반환
				} else { //3. 일치하면 출금 처리			
					day9_6_은행계좌프로그램.계좌리스트[i].set예금액(temp.get예금액()-출금액);
					return 2; //출금 성공 반환
					}
				}
			i++;			
		}
		return 3;  //동일한 정보가 아닐 경우 실패 의미 반환
		//4. 불일치하면 출금 실패
		// 만일 출금액이 예금보다 크면 잔액부족 [ 출금 실패 ]
		
		}
	
	/////////////////////////////////
		//4.이체 (업데이트)
	public int 이체(String 계좌번호, String 비밀번호, int 이체금, String 받는계좌) {
		//내계좌,비번,이체금, 받는사람 계좌
		
		//3. 본인계좌에서 이채 금액 빼기
		//4. 받는계좌에서 이체금액 더하기
		// 리턴 경우의수 : 1.성공 2.실패[ 본인계좌 정보 틀림 , 받는계좌 정보 틀림 , 잔액 부족 등]
	int i = 0;
		for(day9_6_은행 temp : day9_6_은행계좌프로그램.계좌리스트) { // 본인 = 보내는사람 계좌는 temp
			//1. 동일한 계좌번호와 비밀번호 찾기			
			if(temp != null && temp.get계좌번호().equals(계좌번호)
					&& temp.get비밀번호().equals(비밀번호)) 
			
			{  //2. 받는 계좌 찾기
				int j = 0; //받는사람계좌 인덱스 위치 변수
				
				for(day9_6_은행 temp2 : day9_6_은행계좌프로그램.계좌리스트) {
					if(temp2 != null && temp2.get계좌번호().equals(받는계좌)) {
						if(temp2.get예금액() < 이체금 ) { // 잔액 부족
							return 1;
					} else { //성공
						day9_6_은행계좌프로그램.계좌리스트[i].set예금액(temp.get예금액()-이체금); //내 거
						day9_6_은행계좌프로그램.계좌리스트[j].set예금액(temp2.get예금액()+이체금); //남 거
						return 2;
						//성공
					}
				}
				j++;
			} 
				//받는 계좌가 없을 경우
		} i++; 
	}
//본인 정보 계좌 정보가 없을 경우
	return 4;	 }
	
	///////////////////////////////////
		//5.내계좌목록 (리딩)
	
	public day9_6_은행[] 계좌목록 (String 계좌주) { //문자열을 넘겼으니 string으로 받는다.
		//동일한 계좌주의 계좌를 찾아서 배열 담아 넘기기
					// 인수 : 외부로 들어오는 데이터
		
		day9_6_은행[] 내계좌목록 = new day9_6_은행[100]; //배열 생성 후 내 것만 찾음
		
		for(day9_6_은행 temp : day9_6_은행계좌프로그램.계좌리스트) {
			//계좌리스트를 돌린다.
			if(temp != null && temp.get계좌주().equals(계좌주)) {
				//해당 계좌 내 계좌주와 인수의 계좌주와 동일하면
					//내 계좌목록 배열 내 빈 공간을 찾아서 내 계좌를 넣는다.(로그인과 비슷)

				int i = 0; //인덱스 추가
				for(day9_6_은행 temp2 : 내계좌목록) {
					if(temp2 == null) { //내 계좌의 i번째에 temp를 적는다.
						내계좌목록[i] = temp; break;
					} i++;
				} 
			}
		}
		return 내계좌목록; }
	
		//6.대출 (업데이트)
	public boolean 대출() { return false; }


}
